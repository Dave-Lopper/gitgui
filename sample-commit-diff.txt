commit 901bcbb0d73a375406675931d2e6c60ed9a62672
Author: Alexis Haim <alexishaim@outlook.fr>
Date:   Thu Aug 28 17:16:23 2025 +0700

    Further old services/typedefs cleanup

diff --git a/upscale/v2/modules/analytics/typedefs/attachment_ngmnt_summary.py b/upscale/v2/modules/analytics/typedefs/attachment_ngmnt_summary.py
index 5da93e450..ab6bb57fc 100644
--- a/upscale/v2/modules/analytics/typedefs/attachment_ngmnt_summary.py
+++ b/upscale/v2/modules/analytics/typedefs/attachment_ngmnt_summary.py
@@ -3,13 +3,13 @@ import graphene
 from upscale.v2.modules.analytics.typedefs.session import PageAnalytic
~
 from upscale.v2.modules.attachment.typedefs import Attachment
~
 from upscale.v2.modules.contact.service import ContactService
~
 from upscale.v2.modules.user.typedefs import 
-User
+UserView
~
 
~
 
~
 class AttachmentEngagementSummary(graphene.ObjectType):  # type: ignore
~
     id = graphene.String()
~
     attachment = graphene.Field(Attachment)
~
     user = 
-graphene.Field(User)
+graphene.Field(UserView)
~
 
~
     completion = graphene.Int()
~
     engagement_score = graphene.Int()
~
diff --git a/upscale/v2/modules/auth/tests/test_change_password.py b/upscale/v2/modules/auth/tests/test_change_password.py
deleted file mode 100644
index 6e6375f98..000000000
--- a/upscale/v2/modules/auth/tests/test_change_password.py
+++ /dev/null
@@ -1,88 +0,0 @@
-import json
~
~
-import pytest
~
~
-from upscale.v2.conftest import Faker, url_string
~
-from upscale.v2.core.enums import StatusEnum
~
-from upscale.v2.modules.auth.tests.graphql_query import change_password, login_query
~
-from upscale.v2.modules.branch.service import BranchService
~
-from upscale.v2.modules.team.service import TeamService
~
-from upscale.v2.modules.user.service import UserService
~
-from upscale.v2.modules.user.tests.graphql_query import (
~
-    create_branch_query,
~
-    create_team_query,
~
-    create_user_query,
~
-    get_roles_query,
~
-)
~
~
-faker = Faker()
~
~
-class TestAuth:
~
~
-    @pytest.fixture
~
-    def init(self, app, client, data_store):
~
-        branch_response = client.post(
~
-            url_string(app, "branch", query=create_branch_query())
~
-        )
~
-        branch_id = branch_response.json['data']['createBranch']['data']['id']
~
~
-        team_response = client.post(url_string(app, 'configurationv2', query=create_team_query(branch_id)))
~
-        team_id = team_response.json['data']['createTeam']['data']['id']
~
~
-        role_response = client.get(url_string(app, 'user_v2', query=get_roles_query()))
~
-        roles = role_response.json['data']['roles']['items']
~
~
-        data_store['branch_id'] = branch_id
~
-        data_store['team_id'] = team_id
~
~
-        user_data = {
~
-            "input": {
~
-                "firstName": faker.unique.first_name(),
~
-                "lastName": faker.unique.last_name(),
~
-                "username": faker.unique.user_name(),
~
-                "email": faker.unique.email(),
~
-                "role": roles[0]['id'],
~
-                "saleTeam": team_id,
~
-                "tempPassword": 'Test1423!@#',
~
-                "status": StatusEnum.ACTIVE.name
~
-            }
~
-        }
~
-        user_response = client.post(
~
-            url_string(app, 'user_v2', query=create_user_query(), variables=json.dumps(user_data)))
~
-        data_store['user_id'] = user_response.json['data']['createUser']['data']['id']
~
-        data_store['username'] = user_data['input']['username']
~
-        data_store['password'] = user_data['input']['tempPassword']
~
~
-        login_input = {
~
-            "input": {
~
-                "username": data_store['username'],
~
-                "password": data_store['password']
~
-            }
~
-        }
~
-        login_response = client.post(
~
-            url_string(app, 'authV2', query=login_query(), variables=json.dumps(login_input)))
~
-        data_store['session'] = login_response.json['data']['login']['session']
~
-        data_store['logoutToken'] = login_response.json['data']['login']['logoutToken']
~
~
-    def test_change_password(self, app, client, init, data_store):
~
-        variables = {
~
-            "input": {
~
-                "username": data_store['username'],
~
-                "password": faker.password(),
~
-                "session": data_store['session']
~
-            }
~
-        }
~
-        response = client.post(
~
-            url_string(app, 'authV2', query=change_password(), variables=json.dumps(variables)))
~
-        assert response.status_code == 200 and response.json['data']['changePassword']['session'] is not None
~
-        self.teardown_data(data_store)
~
~
-    def teardown_data(self, data_store):
~
-        user = UserService.get_by_id(id=data_store['user_id'])
~
-        user.delete()
~
~
-        team = TeamService.get_by_id(id=data_store['team_id'])
~
-        team.delete()
~
~
-        branch = BranchService.get_by_id(id=data_store['branch_id'])
~
-        branch.delete()
~
diff --git a/upscale/v2/modules/branch/repository/abstract.py b/upscale/v2/modules/branch/repository/abstract.py
index ff29a1f96..aaac1f751 100644
--- a/upscale/v2/modules/branch/repository/abstract.py
+++ b/upscale/v2/modules/branch/repository/abstract.py
@@ -6,6 +6,9 @@ from upscale.v2.modules.branch.domain import Branch, BranchSortByEnum
 
~
 
~
 class BranchAbstractRepository(Protocol):
~
~
     
+def batch_get(self, branch_ids: list[str]) -> list[Branch]: ...
~
~
     def put(self, branch: Branch) -> None: ...
~
 
~
     def delete(self, branch: Branch) -> None: ...
~
diff --git a/upscale/v2/modules/branch/repository/ddb.py b/upscale/v2/modules/branch/repository/ddb.py
index 8d7ba5a37..6ee6c47b7 100644
--- a/upscale/v2/modules/branch/repository/ddb.py
+++ b/upscale/v2/modules/branch/repository/ddb.py
@@ -11,6 +11,26 @@ from upscale.v2.modules.branch.model_v2 import BranchModelV2
 class BranchDdbRepository:
~
     key_codec = DynamodbKeyCodec()
~
 
~
     
+def batch_get(self, branch_ids: list[str]) -> list[Branch]:
~
+        dedup = []
~
+        for _id in branch_ids:
~
+            if _id not in dedup:
~
+                dedup.append(_id)
~
~
+        branches: dict[str, Branch] = {}
~
+        for model in BranchModelV2.batch_get(
~
+            [(f"Branch#{_id}", "Details") for _id in dedup]
~
+        ):
~
+            branch = model.to_domain()
~
+            branches[str(branch.id)] = branch
~
~
+        reordered: list[Branch] = []
~
+        for branch_id in branch_ids:
~
+            if branches.get(branch_id):
~
+                reordered.append(branches[branch_id])
~
~
+        return reordered
~
~
     def count(
~
         self,
~
         status: bool | Unset,
~
diff --git a/upscale/v2/modules/contact/typedefs/base_contact.py b/upscale/v2/modules/contact/typedefs/base_contact.py
index 1c835c3af..7215ef830 100644
--- a/upscale/v2/modules/contact/typedefs/base_contact.py
+++ b/upscale/v2/modules/contact/typedefs/base_contact.py
@@ -12,7 +12,8 @@ from upscale.v2.modules.contact.enums import (
 )
~
 from upscale.v2.modules.tag.service import TagService
~
 from upscale.v2.modules.tag.typedefs.tag import Tag
~
 from 
-upscale.v2.modules.user.service
+upscale.v2.modules.user.repository
  import 
-UserService
+UserDdbRepository
~
+from upscale.v2.modules.user.typedefs import UserView
~
 from upscale.v2.utils.strings import to_title_case
~
 
~
 
~
@@ -101,7 +102,6 @@ class ContactTag(graphene.ObjectType):
 
~
 
~
 class BaseContact(BaseViewModel):
~
-    from upscale.v2.modules.user.typedefs.user import User
~
 
~
     """Defines GraphQL schema of a contact for Contacts API."""
~
 
~
@@ -118,7 +118,7 @@ class BaseContact(BaseViewModel):
     salutation = SalutationEnum()
~
     sales_user_id = graphene.String(required=True)
~
     sales_user_name = graphene.String(required=False)
~
     sale_user = 
-graphene.Field(User,
+graphene.Field(UserView,
  required=True)
~
     contact_type = ContactTypeEnum(required=True)
~
 
~
     messaging = graphene.List(ContactMessaging, default_value=tuple())
~
@@ -172,8 +172,8 @@ class BaseContact(BaseViewModel):
 
~
     def resolve_sale_user(parent, info):
~
         try:
~
             sale_user = 
-UserService.get_by_id(
~
-                id=objects.get(parent,
+UserDdbRepository().get(
~
+                objects.get(parent,
  "sales_user_id")
~
             )
~
             return sale_user
~
         except DoesNotExist:
~
@@ -197,8 +197,8 @@ class BaseContact(BaseViewModel):
 
~
     def resolve_sales_user_name(parent, info) -> str:
~
         try:
~
             sale_user = 
-UserService.get_by_id(
~
-                id=objects.get(parent,
+UserDdbRepository().get(
~
+                objects.get(parent,
  "sales_user_id")
~
             )
~
 
~
             if sale_user is None:
~
diff --git a/upscale/v2/modules/migration/files/1753084975_migrate_teams.py b/upscale/v2/modules/migration/files/1753084975_migrate_teams.py
index 46d7ae357..3d06c2f50 100644
--- a/upscale/v2/modules/migration/files/1753084975_migrate_teams.py
+++ b/upscale/v2/modules/migration/files/1753084975_migrate_teams.py
@@ -1,7 +1,6 @@
 from uuid import UUID
~
 
~
 from upscale.v2.modules.team.domain import Team
~
-from upscale.v2.modules.team.mapper import TeamOrmDomainMapper
~
 from upscale.v2.modules.team.model import TeamModel
~
 from upscale.v2.modules.team.model_v2 import TeamModelV2
~
 
~
@@ -40,7 +39,7 @@ def run():
             ),
~
             updated_at=team.updated_at,
~
         )
~
         model = 
-TeamOrmDomainMapper().to_orm(team)
+TeamModelV2.from_domain(team)
~
         model.save()
~
         print(f"Migrated team {team.id}")
~
 
~
diff --git a/upscale/v2/modules/smartcard/typedefs/smartcard.py b/upscale/v2/modules/smartcard/typedefs/smartcard.py
index c24af5a11..87ef40bcb 100644
--- a/upscale/v2/modules/smartcard/typedefs/smartcard.py
+++ b/upscale/v2/modules/smartcard/typedefs/smartcard.py
@@ -3,15 +3,14 @@ from typing import Optional
 
~
 import graphene as g
~
 from loguru import logger
~
 from pydash import objects  
+# type: ignore
~
 
~
 from upscale.v2.core.enums import 
-ContactOrderValues, FileTypeEnum
+ContactOrderValues
~
 from upscale.v2.core.typedefs import ShareableModel
~
 from upscale.v2.modules.analytics.constants import ATTACHMENT_VIEW_MODEL_TYPE
~
 from upscale.v2.modules.analytics.models import AttachmentViewModelV2
~
 from upscale.v2.modules.attachment.enums import AttachmentStatusEnum
~
 from upscale.v2.modules.attachment.models import AttachmentModel
~
-from upscale.v2.modules.attachment.repository import AttachmentDdbRepository
~
 from upscale.v2.modules.attachment.typedefs import Attachment
~
 from upscale.v2.modules.configuration.constants import (
~
     DEFAULT_BRANDING_CONFIG,
~
@@ -33,8 +32,8 @@ from upscale.v2.modules.smartcard.typedefs import (
     SmartcardAttachmentsAnalytics,
~
     SmartcardConnectionsCount,
~
 )
~
 from 
-upscale.v2.modules.user.typedefs.base_user
+upscale.v2.modules.user.repository
  import 
-BaseUser
+UserDdbRepository
~
 from upscale.v2.modules.user.typedefs.user import 
-User
+UserView
~
 
~
 
~
 class AttachmentSource(g.Enum):
~
@@ -53,14 +52,12 @@ class SmartcardRanking(g.ObjectType):
     views_rank = g.Int()
~
     unique_views = g.Int()
~
     views = g.Int()
~
     smartcard_user = 
-g.Field(BaseUser)
+g.Field(UserView)
~
     unique_views_rank_since = g.String()
~
     views_rank_since = g.String()
~
 
~
     def resolve_smartcard_user(self, info):
~
-from upscale.v2.modules.user.service import UserService
         return 
-UserService.get_by_id(id=self.user_id)
+UserDdbRepository().get(self.user_id)
~
 
~
     def resolve_unique_views_rank(self, info):
~
         return self.order
~
@@ -84,7 +81,7 @@ class SmartcardView(ShareableModel):
     controlled_channels_order = g.Boolean(default_value=False)
~
     disclaimer = g.Boolean()
~
 
~
     user = 
-g.Field(User)
+g.Field(UserView)
~
     user_id = g.String()
~
     attachments = g.List(
~
         SmartcardAttachment, show_turned_off=g.Boolean(default_value=False)
~
@@ -336,9 +333,7 @@ class SmartcardView(ShareableModel):
         )
~
 
~
     def resolve_user(parent, info):
~
-from upscale.v2.modules.user.service import UserService
         return 
-UserService.get_by_id(id=parent.user_id)
+UserDdbRepository().get(parent.user_id)
~
 
~
     def resolve_disclaimer(parent, info):
~
         try:
~
diff --git a/upscale/v2/modules/smartcard_config/typedefs/smartcard_config.py b/upscale/v2/modules/smartcard_config/typedefs/smartcard_config.py
index 5b9541596..a4d56577c 100644
--- a/upscale/v2/modules/smartcard_config/typedefs/smartcard_config.py
+++ b/upscale/v2/modules/smartcard_config/typedefs/smartcard_config.py
@@ -4,22 +4,17 @@ from pydash import objects  # type: ignore
 from upscale.v2.core.enums import ContactOrderValues
~
 from upscale.v2.core.typedefs import BaseViewModel
~
 from upscale.v2.modules.attachment.typedefs import Attachment
~
 from 
-upscale.v2.modules.branch.model
+upscale.v2.modules.branch.repository
  import 
-BranchModel
+BranchDdbRepository
~
 from upscale.v2.modules.branch.typedefs import BranchView
~
 from 
-upscale.v2.modules.team.model
+upscale.v2.modules.team.repository
  import 
-TeamModel
+TeamDdbRepository
~
 from upscale.v2.modules.team.typedefs import TeamView
~
 from 
-upscale.v2.modules.user.service
+upscale.v2.modules.user.repository
  import 
-UserService
+UserDdbRepository
~
+from upscale.v2.modules.user.typedefs import UserView
~
 
~
 from ..service import SmartcardConfigService
~
 from ..utils import get_system_allowed_channels
~
 
~
 
~
-def get_user_typedef():
~
-    from upscale.v2.modules.user.typedefs import BaseUser
~
~
-    return BaseUser
~
~
~
 class ChannelData(graphene.ObjectType):
~
     channel = graphene.Field(ContactOrderValues)
~
     is_allowed = graphene.Boolean()
~
@@ -42,18 +37,14 @@ class SmartcardConfig(BaseViewModel):
     system_allowed_channels = graphene.List(ContactOrderValues)
~
     is_active_channels_order = graphene.Boolean()
~
 
~
     users = 
-graphene.List(lambda: get_user_typedef())
+graphene.List(UserView)
~
     teams = graphene.List(TeamView)
~
     branches = graphene.List(BranchView)
~
 
~
     def resolve_users_names(parent, info):
~
         ids = objects.get(parent, "users_ids", [])
~
-unique_ids = []
~
-        for _id in ids:
~
-            _id not in unique_ids and unique_ids.append(_id)
         if 
-unique_ids:
+ids:
~
             users = 
-UserService.get_by_ids(unique_ids)
+UserDdbRepository().batch_get(ids)
~
         else:
~
             users = []
~
 
~
@@ -65,23 +56,16 @@ class SmartcardConfig(BaseViewModel):
     def resolve_teams_names(parent, info):
~
         ids = objects.get(parent, "teams_ids", [])
~
         if ids:
~
-pynamo_input = list(map(lambda _id: ("SaleTeam", _id), ids))
             teams = 
-[]
~
-            for team in TeamModel.batch_get(pynamo_input):
~
-                teams.append(team)
+TeamDdbRepository().batch_get(ids)
~
         else:
~
             teams = []
~
         return [team.name for team in teams]
~
 
~
     def resolve_branches_names(parent, info):
~
-        from upscale.v2.modules.branch.model import BranchModel
~
 
~
         ids = objects.get(parent, "branches_ids", [])
~
         if ids:
~
-pynamo_input = list(map(lambda _id: ("Branch", _id), ids))
             branches = 
-[]
~
-            for branch in BranchModel.batch_get(pynamo_input):
~
-                branches.append(branch)
+BranchDdbRepository().batch_get(ids)
~
         else:
~
             branches = []
~
         return [branch.name for branch in branches]
~
@@ -110,24 +94,15 @@ class SmartcardConfig(BaseViewModel):
 
~
     def resolve_users(parent, info):
~
         if parent.users_ids:
~
             return 
-UserService.get_by_ids(parent.users_ids)
+UserDdbRepository().batch_get(parent.users_ids)
~
         return []
~
 
~
     def resolve_teams(parent, info):
~
         if parent.teams_ids:
~
-pynamo_input = list(map(lambda _id: ("SaleTeam", _id), parent.teams_ids))
~
-            teams = []
~
-            for team in TeamModel.batch_get(pynamo_input):
~
-                teams.append(team)
             return 
-teams
+TeamDdbRepository().batch_get(parent.teams_ids)
~
         return []
~
 
~
     def resolve_branches(parent, info):
~
         if parent.branches_ids:
~
-pynamo_input = list(map(lambda _id: ("Branch", _id), parent.branches_ids))
~
-            branches = []
~
-            for branch in BranchModel.batch_get(pynamo_input):
~
-                branches.append(branch)
             return 
-branches
+BranchDdbRepository().batch_get(parent.branches_ids)
~
         return []
~
diff --git a/upscale/v2/modules/smartshare/typedefs/share.py b/upscale/v2/modules/smartshare/typedefs/share.py
index cc57060f7..b11d48175 100644
--- a/upscale/v2/modules/smartshare/typedefs/share.py
+++ b/upscale/v2/modules/smartshare/typedefs/share.py
@@ -4,8 +4,7 @@ import graphene as g
 
~
 from upscale.v2.aws.cloudfront_signed_url import get_cf_signed_url
~
 from upscale.v2.core.enums import FileTypeEnum
~
 from upscale.v2.core.typedefs import
-BaseViewModel,
  ShareableModel, ThumbnailV2
-from upscale.v2.modules.attachment.models import AttachmentModel
~
 from upscale.v2.modules.attachment.typedefs import Attachment
~
 from upscale.v2.modules.configuration.constants import (
~
     DEFAULT_BRANDING_CONFIG,
~
@@ -16,8 +15,8 @@ from upscale.v2.modules.configuration.typedefs.branding_configuration_with_ids i
     BrandingConfigurationWithIds,
~
 )
~
 from upscale.v2.modules.smartshare.enums import ShareSourceEnum, ShareTypeEnum
~
 from 
-upscale.v2.modules.user.service
+upscale.v2.modules.user.repository
  import 
-UserService
+UserDdbRepository
~
 from upscale.v2.modules.user.typedefs.user import 
-User
+UserView
~
 
~
 
~
 def get_contact_typedef():
~
@@ -52,7 +51,7 @@ class SmartsharePage(ShareableModel):
     name = g.String()
~
     description = g.String()
~
     attachments = g.List(SmartsharePageAttachment)
~
     user = 
-g.Field(User)
+g.Field(UserView)
~
     url = g.String()
~
     is_archived = g.Boolean()
~
     expires_at = g.String()
~
@@ -77,7 +76,7 @@ class SmartsharePage(ShareableModel):
         return json.loads(microsite_config.data).get("turn_on_disclaimer", True)
~
 
~
     def resolve_user(parent, info):
~
         return 
-UserService.get_by_id(id=parent.created_by)
+UserDdbRepository().get(parent.created_by)
~
 
~
 
~
 class AttachmentMetric(g.ObjectType):
~
@@ -119,7 +118,7 @@ class Smartshare(ShareableModel):
     interactions_count = g.Int(default_value=0)
~
     is_archived = g.Boolean()
~
     unique_views = g.Int(default_value=0)
~
     created_by = 
-g.Field(User)
+g.Field(UserView)
~
     is_read = g.Boolean()
~
     url = g.String()
~
     attachment_metrics = g.List(AttachmentMetric)
~
@@ -128,7 +127,7 @@ class Smartshare(ShareableModel):
     expires_at = g.String()
~
 
~
     def resolve_created_by(self, info):
~
         return 
-UserService.get_by_id(id=self.created_by)
+UserDdbRepository().get(self.created_by)
~
 
~
     def resolve_contact(self, info):
~
         if self.contact_id:
~
diff --git a/upscale/v2/modules/smartshare/typedefs/template.py b/upscale/v2/modules/smartshare/typedefs/template.py
index 27263b211..8ceb6eba6 100644
--- a/upscale/v2/modules/smartshare/typedefs/template.py
+++ b/upscale/v2/modules/smartshare/typedefs/template.py
@@ -1,15 +1,15 @@
 from datetime import datetime, timezone
~
 
~
 import graphene as g
~
 from pydash import objects  
+# type: ignore
~
 
~
 from upscale.v2.core.typedefs import ShareableModel
~
 from upscale.v2.modules.attachment.repository import AttachmentDdbRepository
~
 from upscale.v2.modules.attachment.typedefs import Attachment
~
 from upscale.v2.modules.smartshare.services import SmartshareService
~
 from upscale.v2.modules.smartshare.typedefs.share import AttachmentMetric
~
 from 
-upscale.v2.modules.user.service
+upscale.v2.modules.user.repository
  import 
-UserService
+UserDdbRepository
~
 from upscale.v2.modules.user.typedefs import 
-User
+UserView
~
 
~
 from .share import Smartshare
~
 
~
@@ -28,7 +28,7 @@ class SmartshareTemplateBase(ShareableModel):
 
~
     is_archived = g.Boolean(default_value=False)
~
     is_read = g.Boolean(default_value=False)
~
     created_by = 
-g.Field(User)
+g.Field(UserView)
~
     attachments = g.List(Attachment)
~
     attachment_metrics = g.List(AttachmentMetric)
~
     shares = g.List(Smartshare)
~
@@ -67,7 +67,8 @@ class SmartshareTemplate(SmartshareTemplateBase):
         )
~
 
~
     def resolve_created_by(self, info):
~
         
+repo = UserDdbRepository()
~
         return 
-UserService.get_by_id(id=self.created_by)
+repo.get(self.created_by)
~
 
~
     def resolve_shares(self, info):
~
         if self.share_ids:
~
diff --git a/upscale/v2/modules/team/model_v2.py b/upscale/v2/modules/team/model_v2.py
index a8e59c35e..9f49f7e5c 100644
--- a/upscale/v2/modules/team/model_v2.py
+++ b/upscale/v2/modules/team/model_v2.py
@@ -18,12 +18,12 @@ class TeamModelV2(MainBaseModel):
         pass
~
 
~
     name = UnicodeAttribute()
~
     address = 
-AddressAttribute()
+AddressAttribute(null=True)
~
     name_search = UnicodeAttribute()
~
     branch_id = UnicodeAttribute()
~
     branch_name = UnicodeAttribute()
~
     internal_id = UnicodeAttribute()
~
     total_users = 
-NumberAttribute()
+NumberAttribute(default=0)
~
     smartcard_config_id = UnicodeAttribute(null=True)
~
     status = BooleanAttribute(default=True)
~
 
~
@@ -68,8 +68,8 @@ class TeamModelV2(MainBaseModel):
     @classmethod
~
     def from_domain(cls, team: Team) -> "TeamModelV2":
~
         return cls(
~
             
-pk=f"Branch#{team.branch_id}",
~
-            sk=f"Team#{team.id}",
+pk=f"Team#{team.id}",
~
+            sk="Details",
~
             name=team.name,
~
             name_search=team.name.lower(),
~
             address=AddressAttribute.from_domain(team.address),
~
@@ -105,6 +105,8 @@ class TeamModelV2(MainBaseModel):
             gsi8_sk=team.name.lower(),
~
             gsi9_pk="Team",
~
             gsi9_sk=str(team.id),
~
             
+gsi10_pk=f"Branch#{team.branch_id}",
~
+            gsi10_sk=f"Team#{team.id}",
~
         )
~
 
~
     def to_domain(self) -> Team:
~
diff --git a/upscale/v2/modules/team/query.py b/upscale/v2/modules/team/query.py
index 1ad079563..f438b0406 100644
--- a/upscale/v2/modules/team/query.py
+++ b/upscale/v2/modules/team/query.py
@@ -23,8 +23,8 @@ class TeamQuery(graphene.ObjectType):
         Query an team by id
~
         """
~
 
~
         
-team
+service
  = 
-TeamService.get_by_id(id=id)
+bootstrap()
~
         return 
-team
+service.get(id)
~
 
~
     def resolve_teams(root, info, condition={}, pagination={}):
~
         service = bootstrap()
~
diff --git a/upscale/v2/modules/team/repository/abstract.py b/upscale/v2/modules/team/repository/abstract.py
index f3b005833..02ab505b7 100644
--- a/upscale/v2/modules/team/repository/abstract.py
+++ b/upscale/v2/modules/team/repository/abstract.py
@@ -6,6 +6,9 @@ from upscale.v2.modules.team.domain import Team, TeamSortByEnum
 
~
 
~
 class TeamAbstractRepository(Protocol):
~
~
     
+def batch_get(self, team_ids: list[str]) -> list[Team]: ...
~
~
     def get(self, team_id: str) -> Team: ...
~
 
~
     def put(self, team: Team) -> None: ...
~
diff --git a/upscale/v2/modules/team/repository/ddb.py b/upscale/v2/modules/team/repository/ddb.py
index 2787335e0..b85b4b71d 100644
--- a/upscale/v2/modules/team/repository/ddb.py
+++ b/upscale/v2/modules/team/repository/ddb.py
@@ -12,6 +12,26 @@ from upscale.v2.modules.team.model_v2 import TeamModelV2
 class TeamDdbRepository:
~
     key_codec = DynamodbKeyCodec()
~
 
~
     
+def batch_get(self, team_ids: list[str]) -> list[Team]:
~
+        dedup = []
~
+        for team_id in team_ids:
~
+            if team_id not in dedup:
~
+                dedup.append(team_id)
~
~
+        teams: dict[str, Team] = {}
~
+        for model in TeamModelV2.batch_get(
~
+            [(f"Team#{team_id}", "Details") for team_id in dedup]
~
+        ):
~
+            team = model.to_domain()
~
+            teams[str(team.id)] = team
~
~
+        reordered = []
~
+        for team_id in team_ids:
~
+            if teams.get(team_id):
~
+                reordered.append(teams[team_id])
~
~
+        return reordered
~
~
     def get(self, team_id: str) -> Team:
~
         qr = TeamModelV2.gsi9.query(
~
             hash_key="Team",
~
diff --git a/upscale/v2/modules/user/mutations/update_user_profile.py b/upscale/v2/modules/user/mutations/update_user_profile.py
deleted file mode 100644
index a632dc87d..000000000
--- a/upscale/v2/modules/user/mutations/update_user_profile.py
+++ /dev/null
@@ -1,22 +0,0 @@
-import graphene
~
~
-from upscale.v2.modules.user.inputs import UpdateUserProfileInput
~
-from upscale.v2.modules.user.service import UserService
~
-from upscale.v2.modules.user.typedefs import UserProfile
~
~
~
-class UpdateUserProfile(graphene.Mutation):
~
-    success = graphene.Boolean()
~
-    data = graphene.Field(lambda: UserProfile)
~
~
-    class Arguments:
~
-        input = UpdateUserProfileInput(required=True)
~
~
-    def mutate(root, info, input: UpdateUserProfileInput):
~
-        from upscale.v2.utils.request import get_current_user
~
~
-        input.validate()
~
-        current_user = get_current_user()
~
-        updated_user = UserService.update(id=current_user.id, data=input)
~
~
-        return UpdateUserProfile(data=updated_user, success=True)
~
diff --git a/upscale/v2/modules/user/typedefs/__init__.py b/upscale/v2/modules/user/typedefs/__init__.py
index 556ea63de..a7b93e1ec 100644
--- a/upscale/v2/modules/user/typedefs/__init__.py
+++ b/upscale/v2/modules/user/typedefs/__init__.py
@@ -1,25 +1,19 @@
-from .base_user import BaseUser
~
 from .enums import (
~
     ContactChannel,
~
     ProfileLanguageEnum,
~
     UserRoleEnum,
~
     UserSortByEnum,
~
 )
~
 from .user import
-SmartcardData, User,
  UserView
~
 from .user_pagination import UserPagination
~
-from .user_profile import UserProfile
~
 from .videogen_api_key import VideogenApiKey
~
 
~
 __all__ = [
~
-    "BaseUser",
~
     "ContactChannel",
~
     "ProfileLanguageEnum",
~
-    "User",
~
     "UserView",
~
-    "UserProfile",
~
     "UserPagination",
~
     "UserRoleEnum",
~
     "UserSortByEnum",
~
-    "SmartcardData",
~
     "VideogenApiKey",
~
 ]
~
diff --git a/upscale/v2/modules/user/typedefs/base_user.py b/upscale/v2/modules/user/typedefs/base_user.py
deleted file mode 100644
index 6bf443d21..000000000
--- a/upscale/v2/modules/user/typedefs/base_user.py
+++ /dev/null
@@ -1,200 +0,0 @@
-import graphene
~
-from pydash import objects  # type: ignore
~
~
-from upscale.v2.core.enums import ContactOrderValues
~
-from upscale.v2.core.typedefs import AddressView, BaseViewModel
~
-from upscale.v2.modules.attachment.models import AttachmentModel
~
-from upscale.v2.modules.attachment.repository.ddb_repository import (
~
-    AttachmentDdbRepository,
~
-)
~
-from upscale.v2.modules.attachment.typedefs import Attachment
~
-from upscale.v2.modules.report.service import ReportService
~
-from upscale.v2.modules.report.typedefs.report import Report
~
-from upscale.v2.modules.role.typedefs.role import RoleView
~
-from upscale.v2.modules.team.typedefs.team import TeamView
~
-from upscale.v2.modules.user.constants import DEFAULT_CONTACT_ORDER
~
~
-from ..utils import get_allowed_contact_order
~
~
~
-class PersonalUplink(BaseViewModel):
~
-    shorten_wrap_url = graphene.String()
~
-    name = graphene.String()
~
-    type = graphene.String()
~
-    is_accepted = graphene.Boolean()
~
-    is_primary = graphene.Boolean()
~
-    is_read = graphene.Boolean()
~
-    last_activity_time = graphene.DateTime()
~
-    total_activity_count = graphene.Int()
~
-    total_share = graphene.Int()
~
-    is_archived = graphene.Boolean()
~
~
-    def resolve_total_share(parent, info):
~
-        return len(parent.children_ids)
~
~
-    def resolve_is_read(parent, info):
~
-        # return True
~
-        is_primary = objects.get(parent, "is_primary")
~
-        if is_primary:
~
-            un_read_children = objects.get(parent, "un_read_children")
~
-            return len(un_read_children) == 0
~
-        else:
~
-            return objects.get(parent, "is_read")
~
~
~
-class BaseUser(BaseViewModel):
~
-    internal_id = graphene.String()
~
-    email = graphene.String()
~
-    username = graphene.String()
~
-    first_name = graphene.String()
~
-    last_name = graphene.String()
~
-    other_name = graphene.String()
~
-    phone = graphene.String()
~
-    secondary_phones = graphene.List(graphene.String)
~
-    secondary_email = graphene.String()
~
-    avatar = graphene.Field(Attachment)
~
-    job_title = graphene.String()
~
-    viber_id = graphene.String()
~
-    skype_id = graphene.String()
~
-    line_id = graphene.String()
~
-    whatsapp_id = graphene.String()
~
-    wechat_id = graphene.String()
~
-    wechat_qr = graphene.Field(Attachment)
~
-    telegram_id = graphene.String()
~
-    zalo_id = graphene.String()
~
-    instagram_id = graphene.String()
~
-    facebook_id = graphene.String()
~
-    tiktok_id = graphene.String()
~
-    calendly_url = graphene.String()
~
-    temp_password = graphene.String()
~
-    linkedin_id = graphene.String()
~
-    sale_team = graphene.Field(TeamView)
~
-    sale_team_name = graphene.String()
~
-    last_session = graphene.DateTime()
~
-    activity_rank_status = graphene.String()
~
-    role_id = graphene.String()
~
-    role_name = graphene.String()
~
-    active_at = graphene.DateTime()
~
-    vcf_url = graphene.String()
~
-    pkpass_url = graphene.String()
~
-    google_wallet_info = graphene.String()
~
-    smartcard_url = graphene.String()
~
-    personal_intro = graphene.Field(Attachment)
~
-    personal_intro_url = graphene.String()
~
-    report = graphene.List(Report)
~
-    biography = graphene.String()
~
-    contact_order = graphene.List(
~
-        ContactOrderValues, default_value=DEFAULT_CONTACT_ORDER
~
-    )
~
-    preferred_company_name = graphene.String()
~
-    qualifications = graphene.String()
~
-    address = graphene.Field(AddressView)
~
~
-    favorited_contents = graphene.List(graphene.String)
~
-    favorited_products = graphene.List(graphene.String)
~
-    attachments = graphene.List(Attachment)
~
~
-    notification_enable = graphene.Boolean()
~
~
-    # platforms = graphene.List(PlatformInformation)
~
~
-    role = graphene.Field(RoleView)
~
~
-    statistics = graphene.JSONString()
~
~
-    smartcard_config_id = graphene.String()
~
-    smartcard_id = graphene.String()
~
-    # multi_language_profiles = graphene.List(UserLanguageProfile)
~
~
-    # overrides BaseViewModel
~
~
-    def resolve_name(parent, info):
~
-        first_name = objects.get(parent, "first_name")
~
-        last_name = objects.get(parent, "last_name")
~
~
-        return f"{first_name} {last_name}"
~
~
-    def resolve_role_id(parent, info):
~
-        return objects.get(parent, "role")
~
~
-    def resolve_avatar(parent, info):
~
-        avatar = objects.get(parent, "avatar")
~
-        if not avatar:
~
-            return None
~
-        repo = AttachmentDdbRepository()
~
-        return repo.get(avatar)
~
~
-    def resolve_personal_intro(parent, info):
~
-        attachment_id = objects.get(parent, "personal_intro_id")
~
-        if not attachment_id:
~
-            return None
~
-        repo = AttachmentDdbRepository()
~
-        return repo.get(attachment_id)
~
~
-    def resolve_sale_team(parent, info):
~
-        return {
~
-            "id": parent.sale_team,
~
-            "name": parent.sale_team_name,
~
-        }
~
~
-    def resolve_role(parent, info):
~
-        return {"id": parent.role, "name": parent.role_name}
~
~
-    def resolve_report(parent, info):
~
-        model_type = "report#user#%s" % parent.id
~
-        items, last_key, limit, order, sort_by = ReportService.query(
~
-            model_type=model_type
~
-        )
~
-        return items
~
~
-    def resolve_attachments(parent, info):
~
-        attachments = objects.get(parent, "attachments")
~
~
-        if not attachments:
~
-            return []
~
-        data = AttachmentModel.batch_get(
~
-            [(f"Attachment#{_id}", "Details") for _id in attachments]
~
-        )
~
-        new_attachments = list(filter(lambda x: x.is_uploaded == 1, data))
~
-        return sorted(new_attachments, key=lambda d: attachments.index(d._id))
~
~
-    def resolve_platforms(parent, info):
~
-        android_version = objects.get(parent, "android_version")
~
-        android_last_session_time = objects.get(
~
-            parent, "android_last_session_time"
~
-        )
~
-        ios_version = objects.get(parent, "ios_version")
~
-        ios_last_session_time = objects.get(parent, "ios_last_session_time")
~
-        web_last_session_time = objects.get(parent, "web_last_session_time")
~
-        platforms = []
~
-        if android_version and android_last_session_time:
~
-            platforms.append(
~
-                {
~
-                    "platform": "android",
~
-                    "app_version": android_version,
~
-                    "last_session_time": android_last_session_time,
~
-                }
~
-            )
~
-        if ios_version and ios_last_session_time:
~
-            platforms.append(
~
-                {
~
-                    "platform": "ios",
~
-                    "app_version": ios_version,
~
-                    "last_session_time": ios_last_session_time,
~
-                }
~
-            )
~
-        if web_last_session_time:
~
-            platforms.append(
~
-                {"platform": "web", "last_session_time": web_last_session_time}
~
-            )
~
-        return platforms
~
~
-    def resolve_wechat_qr(parent, info):
~
-        if not parent.wechat_qr_id:
~
-            return None
~
-        repo = AttachmentDdbRepository()
~
-        return repo.get(parent.wechat_qr_id)
~
~
-    def resolve_contact_order(parent, info):
~
-        contact_order = objects.get(parent, "contact_order")
~
-        return get_allowed_contact_order(contact_order=contact_order)
~
diff --git a/upscale/v2/modules/user/typedefs/user.py b/upscale/v2/modules/user/typedefs/user.py
index 1573a50cd..8009cdf04 100644
--- a/upscale/v2/modules/user/typedefs/user.py
+++ b/upscale/v2/modules/user/typedefs/user.py
@@ -1,160 +1,30 @@
 import graphene
~
-from pydash import objects  # type: ignore
~
 
~
 from upscale.v2.core.enums import
-ContactOrderValues,
  StatusEnum
~
 from upscale.v2.core.typedefs import AddressView
~
-from upscale.v2.modules.attachment.models import AttachmentModel
~
 from upscale.v2.modules.attachment.services.attachment.bootstrap import (
~
     bootstrap as attachment_bootstrap,
~
 )
~
 from upscale.v2.modules.attachment.typedefs import Attachment
~
-from upscale.v2.modules.branch.service import BranchService
~
 from upscale.v2.modules.role.typedefs.role import RoleView
~
 from upscale.v2.modules.smartcard.bootstrap import (
~
     bootstrap as smartcard_bootstrap,
~
 )
~
-from upscale.v2.modules.smartcard.service import SmartcardService
~
-from upscale.v2.modules.smartcard_config.service import SmartcardConfigService
~
-from upscale.v2.modules.smartcard_config.typedefs.smartcard_config import (
~
-    SmartcardConfig,
~
-)
~
 from upscale.v2.modules.team.bootstrap import bootstrap as team_bootstrap
~
-from upscale.v2.modules.team.service import TeamService
~
 from upscale.v2.modules.team.typedefs import TeamView
~
 from upscale.v2.modules.user.domain import User as UserDomain
~
 from upscale.v2.modules.user.domain import UserLocalizedProfile
~
-from upscale.v2.modules.user.typedefs.base_user import BaseUser
~
 from upscale.v2.modules.user.typedefs.enums import (
~
     ContactChannel,
~
     ProfileLanguageEnum,
~
 )
~
 
~
 
~
-class SmartcardData(graphene.ObjectType):
~
-    smartcard_config = graphene.Field(SmartcardConfig)
~
-    smartcard_attachments = graphene.List(Attachment)
~
-    allowed_channels_order = graphene.List(ContactOrderValues)
~
~
-    def __init__(self, user_attachments_ids=[], user_contact_order=[], *args, **kwargs):
~
-        super().__init__(*args, **kwargs)
~
-        self.user_attachments_ids = user_attachments_ids
~
-        self.user_contact_order = user_contact_order
~
~
-    def resolve_smartcard_attachments(parent, info):
~
-        config_attachments_ids = objects.get(
~
-            parent, "smartcard_config.medias_ids_active_display", []
~
-        )
~
-        user_attachments_ids = objects.get(parent, "user_attachments_ids", [])
~
-        attachments_ids = [*config_attachments_ids, *user_attachments_ids]
~
-        if not attachments_ids:
~
-            return []
~
~
-        return AttachmentModel.batch_get(
~
-            [(f"Attachment#{_id}", "Details") for _id in attachments_ids]
~
-        )
~
~
-    def resolve_allowed_channels_order(parent, info):
~
-        allowed_channels_order = objects.get(parent, "smartcard_config.allowed_channels_order")
~
-        is_active_channels_order = objects.get(parent, "smartcard_config.is_active_channels_order")
~
~
-        if not is_active_channels_order or not allowed_channels_order:
~
-            return objects.get(parent, "user_contact_order", [])
~
~
-        # This will make extra sure that channels that aren't permited by the system passes through,
~
-        allowed_channels_order = SmartcardConfigService.configure_allowed_channels_order(
~
-            allowed_channels_order
~
-        )
~
-        return [
~
-            channel_data.get("channel")
~
-            for channel_data in allowed_channels_order
~
-            if channel_data.get("is_allowed")
~
-        ]
~
~
~
 class QRCodes(graphene.ObjectType):
~
     plain = graphene.Field(Attachment)
~
     branded = graphene.Field(Attachment)
~
 
~
 
~
-class User(BaseUser):
~
~
-    class Meta:
~
-        name = "OldUser"
~
~
-    smartcard_data = graphene.Field(SmartcardData, deprecation_reason="use smartcard instead")
~
-    smartcard = graphene.Field(
~
-        "upscale.v2.modules.smartcard.typedefs.smartcard.SmartcardView"
~
-    )
~
-    qrcodes = graphene.Field(QRCodes)
~
-    smartcard_last_activity_at = graphene.String()
~
~
-    def resolve_qrcodes(self, info):
~
-        ids = list(filter(lambda _: _ is not None, [self.plain_qrcode_id, self.qrcode_id]))
~
~
-        if len(ids) == 1:
~
-            attachments = [AttachmentModel.get(ids[0])]
~
-        else:
~
-            attachments = AttachmentModel.batch_get(
~
-                [(f"Attachment#{_id}", "Details") for _id in ids]
~
-            )
~
~
-        plain = list(filter(lambda x: x._id == self.plain_qrcode_id, attachments))
~
-        branded = list(filter(lambda x: x._id == self.qrcode_id, attachments))
~
-        qrcodes = {"plain": plain[0] if plain else None, "branded": branded[0] if branded else None}
~
-        return QRCodes(**qrcodes)
~
~
-    def resolve_address(self, info):
~
-        return self.address or self.team_address or self.branch_address or None
~
~
-    def resolve_sale_team(parent, info):
~
-        return TeamService.get_by_id(id=parent.sale_team)
~
~
-    def resolve_smartcard_data(parent, info):
~
-        from upscale.v2.modules.smartcard_config.service import SmartcardConfigService
~
~
-        # will try to find a smartcard config assigned to the user
~
-        # based on hierarchy user > team > branch
~
-        smartcard_config_id = objects.get(parent, "smartcard_config_id")
~
-        if not smartcard_config_id:
~
-            sale_team_id = objects.get(parent, "sale_team")
~
-            sale_team = TeamService.get_by_id(id=sale_team_id)
~
-            smartcard_config_id = objects.get(sale_team, "smartcard_config_id")
~
-            if not smartcard_config_id and sale_team:
~
-                branch_id = objects.get(sale_team, "branch")
~
-                branch = BranchService.get_by_id(id=branch_id)
~
-                smartcard_config_id = objects.get(branch, "smartcard_config_id")
~
~
-        smartcard_config = (
~
-            SmartcardConfigService.get_by_id(id=smartcard_config_id)
~
-            if smartcard_config_id
~
-            else None
~
-        )
~
-        user_attachments_ids = objects.get(parent, "attachments")
~
-        user_contact_order = objects.get(parent, "contact_order")
~
~
-        return SmartcardData(
~
-            smartcard_config=smartcard_config,
~
-            user_attachments_ids=user_attachments_ids,
~
-            user_contact_order=user_contact_order,
~
-        )
~
~
-    def resolve_attachments(parent, info):
~
-        attachments = objects.get(parent, "attachments", [])
~
-        if not attachments:
~
-            return []
~
-        data = AttachmentModel.batch_get([(f"Attachment#{_id}", "Details") for _id in attachments])
~
-        new_attachments = list(filter(lambda x: x.is_uploaded is True, data))
~
-        return sorted(new_attachments, key=lambda d: attachments.index(d._id))
~
~
-    def resolve_role(parent, info):
~
-        from upscale.v2.modules.role.service import RoleService
~
~
-        return RoleService.get_by_id(id=parent.role)
~
~
-    def resolve_smartcard(parent, info):
~
-        return SmartcardService.find_by_id(id=parent.smartcard_id)
~
~
~
 class PlatformInformation(graphene.ObjectType):
~
     platform = graphene.String()
~
     app_version = graphene.String()
~
diff --git a/upscale/v2/modules/user/typedefs/user_activity_pagination.py b/upscale/v2/modules/user/typedefs/user_activity_pagination.py
index e4c253ed4..0394c9f66 100644
--- a/upscale/v2/modules/user/typedefs/user_activity_pagination.py
+++ b/upscale/v2/modules/user/typedefs/user_activity_pagination.py
@@ -8,8 +8,7 @@ from upscale.v2.modules.user.inputs.user_activity_filter_condition import (
     UserActivityPaginationInput,
~
 )
~
 from upscale.v2.modules.user.repository import UserDdbRepository
~
 from
-upscale.v2.modules.user.service import UserService
~
-from
  upscale.v2.modules.user.typedefs.user import 
-User
+UserView
~
 
~
 
~
 class ActivityTarget(BaseViewModel):
~
@@ -21,7 +20,7 @@ class ActivityTarget(BaseViewModel):
 class UserActivity(BaseViewModel):
~
     target_id = graphene.String()
~
     target_type = UpsModelTypeEnum()
~
     created_by = 
-graphene.Field(User)
+graphene.Field(UserView)
~
     extra_info = graphene.Field(ActivityTarget)
~
     start_date = graphene.DateTime()
~
     stat_count = graphene.Int()
~
@@ -39,7 +38,8 @@ class UserActivity(BaseViewModel):
         return None
~
 
~
     def resolve_created_by(parent, info):
~
         
+repo = UserDdbRepository()
~
         return 
-UserService.get_by_id(id=parent.created_by)
+repo.get(parent.created_by)
~
 
~
 
~
 class UserActivityPagination(BasePaginationViewModel):
~
diff --git a/upscale/v2/modules/user/typedefs/user_profile.py b/upscale/v2/modules/user/typedefs/user_profile.py
deleted file mode 100644
index c5b867d21..000000000
--- a/upscale/v2/modules/user/typedefs/user_profile.py
+++ /dev/null
@@ -1,8 +0,0 @@
-import graphene
~
~
-from upscale.v2.modules.role.typedefs.role import RoleView
~
-from upscale.v2.modules.user.typedefs.user import User
~
~
~
-class UserProfile(User):
~
-    view_mode_role = graphene.Field(RoleView)
~
diff --git a/upscale/v2/modules/validate/users.py b/upscale/v2/modules/validate/users.py
index 76e08a5dc..050dfcdcb 100644
--- a/upscale/v2/modules/validate/users.py
+++ b/upscale/v2/modules/validate/users.py
@@ -3,9 +3,7 @@ from pydash import arrays, collections, objects  # type: ignore
 from upscale.v2.core.domain import Address
~
 from upscale.v2.modules.auth.config import WHITELISTED_PHONES
~
 from upscale.v2.modules.auth.domain import ROLES
~
-from upscale.v2.modules.role.service import RoleService
~
 from upscale.v2.modules.team.repository import TeamDdbRepository
~
-from upscale.v2.modules.team.service import TeamService
~
 from upscale.v2.modules.user.constants import BulkUploadUserErrors, RoleNameEnum
~
 from upscale.v2.modules.user.domain import (
~
     ProfileLanguage,
~
@@ -34,18 +32,21 @@ def validate_users_proceed(data, vs_id, file_id, language):
     user_csv_headers = UserCsvHeader(language=language)
~
 
~
     user_repo = UserDdbRepository()
~
     
-qr
+team_repo
  = 
-user_repo.query()
~
-    users = {user.id: user for user in qr.items}
~
-    while qr.start_key is not None:
~
-        qr = user_repo.query(last_key=qr.start_key)
~
-        for user in qr.items:
~
-            users[user.id] = user
+TeamDdbRepository()
~
 
~
     
-total_team
+user_qr
  = 
-TeamService.count(condition={})
~
-    teams, *_
+user_repo.query()
~
+    users
  = 
-TeamService.query(pagination={"limit": total_team})
+{user.id: user for user in user_qr.items}
~
+    while user_qr.start_key is not None:
~
+        user_qr = user_repo.query(last_key=user_qr.start_key)
~
+        for user in user_qr.items:
~
+            users[user.id] = user
~
 
~
     
-total_role
+team_qr
  = 
-RoleService.count(condition={})
~
-    roles, *_
+team_repo.query()
~
+    teams
  = 
-RoleService.query(pagination={"limit": total_role})
+{team.internal_id: team for team in team_qr.items}
~
+    while team_qr.start_key is not None:
~
+        team_qr = team_repo.query(last_key=team_qr.start_key)
~
+        for team in team_qr.items:
~
+            teams[team.internal_id] = team
~
 
~
     for index, row in enumerate(data):
~
         errors_msg = []
~
@@ -68,16 +69,18 @@ def validate_users_proceed(data, vs_id, file_id, language):
         if is_empty(row.get(user_csv_headers.role)):
~
             errors_msg.append(BulkUploadUserErrors.USER_REQUIRE_ROLE)
~
         else:
~
             role = 
-collections.find(roles,
+collections.find(
~
+                list(ROLES.values()),
~
                 lambda r: r.name == 
-row.get(user_csv_headers.role))
+row.get(user_csv_headers.role),
~
+            )
~
 
~
             if role is None:
~
                 errors_msg.append(BulkUploadUserErrors.USER_ROLE_NOT_FOUND)
~
         if is_empty(row.get(user_csv_headers.sale_team_id)):
~
             errors_msg.append(BulkUploadUserErrors.USER_REQUIRE_SALE_TEAM)
~
         else:
~
             sale_team = 
-collections.find(
~
-                teams,
~
-                lambda t: t.internal_id.lower() == row.get(user_csv_headers.sale_team_id).lower(),
+teams.get(
~
+                row.get(user_csv_headers.sale_team_id).lower()
~
             )
~
 
~
             if sale_team is None:
~
